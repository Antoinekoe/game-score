<%- include("partials/header.ejs") %>

<section class="collection-container">
  <div class="left-part">
    <h2>My collection</h2>
    <% if (isEntriesInDB === true) { %>
    <div class="search-menu">
      <i class='bxr  bx-search' style='color:#5454F1'></i>
      <form class="game-search-menu" action="/chooseGame" method="post">
        <input type="text" name="search" id="searchInputMenu" autocomplete="off" autofocus="on" maxlength="255" placeholder="Enter game name">
        <input type="hidden" name="gameName" id="hiddenGameName">
        <input type="hidden" name="gameId" id="hiddenGameId">
        <input type="hidden" name="gameCover" id="hiddenGameCover">
        <input type="hidden" name="gameDate" id="hiddenGameDate">
        <div class="dropdownMenu">
          <ul id="dropdownListMenu">
          </ul>
        </div>
      </form>
    </div>
    <% } %>
  </div>
  <div class="right-part">
    <%# Filter the data %>
    <form action="/filter" method="post" id="filterForm">
      <label for="filter">
        Filter by:
      </label>
      <select name="filter" id="id">
        <option value="newestToOldest" class="option-filter" <% if(filter === 'newestToOldest') {%> selected <% }%>>Newest -> Oldest</option>
        <option value="oldestToNewest" class="option-filter" <% if(filter === 'oldestToNewest') {%> selected <% }%>>Oldest -> Newest</option>
        <option value="bestNoteToWorstNote" class="option-filter" <% if(filter === 'bestNoteToWorstNote') {%> selected <% }%>>Best note -> Worst note</option>
        <option value="worstNoteToBestNote" class="option-filter" <% if(filter === 'worstNoteToBestNote') {%> selected <% }%>>Worst note -> Best note</option>
      </select>
    </form>
  </div>
</section>
<%# If no entries in DB, shows the add game %>
<% if (isEntriesInDB === false) { %>
<section class="choosegame-container">
  <i class='bx  bxs-play bx-lg' style='color:#5454F1'></i>
  <h2>No games added</h2>
  <p>Start adding games you played to create your collection.</p>
  <div class="search">
    <i class='bxr  bx-search' style='color:#757575'></i>

    <%# Choose the game to review%>
    <form class="game-search" action="/chooseGame" method="post">
      <input type="text" name="search" id="searchInputChoose" autocomplete="off" autofocus="on" maxlength="255" placeholder="Enter game name">
      <input type="hidden" name="gameName" id="hiddenGameName">
      <input type="hidden" name="gameId" id="hiddenGameId">
      <input type="hidden" name="gameCover" id="hiddenGameCover">
      <input type="hidden" name="gameDate" id="hiddenGameDate">
      <div class="dropdownChoose">
        <ul id="dropdownListChoose">
        </ul>
      </div>
    </form>
  </div>
</section>
<%# If there are entries in DB, shows the entries %>
<% } else { %>
<section class="game-review-container">
  <% resultDB.forEach(entry => { %>
  <div class="game-review">
    <div class="top-game-review">
      <img src="<%= entry.img %>">
      <div class="info-game-review">
        <h3><%= entry.game_name %></h3>
        <div class="note-game-review">
          <span>
            <% for (let i = 1; i <= 5; i++) { %>
            <% if (i <= entry.note) { %>
            <i class='bx bxs-star' style='color:#FFD700'></i>
            <% } else { %>
            <i class='bx bx-star' style='color:#FFD700'></i>
            <% } %>
            <% } %>
          </span>
          <span class="note">(<%= entry.note %>/5)</span>
        </div>
        <span>Added on <%= new Date(entry.date_entry).toLocaleDateString('en-US', { day: 'numeric', month: 'long', year: 'numeric' }) %></span>
      </div>
      <div class="edit-delete-button">
        <form action="/edit/<%= entry.id %>" method="get" id="editForm">
          <button type="submit" class="edit-button">

            <i class='bxr  bxs-edit-alt bx-xs' style='color:#5454F1' id="edit"></i>
          </button>
        </form>
        <form action="/delete/<%= entry.id %>" method="post" id="deleteForm">
          <button type="submit" class="delete-button">
            <i class='bxr  bxs-trash-alt bx-xs' style='color:#e45353' id="delete"></i>
          </button>
      </div>
      </form>
    </div>

    <span><%= entry.description %></span>
  </div>
  <% }); %>
</section>
<% }; %>



<%- include("partials/footer.ejs") %>

<script>
  // If the value of filter changes, submit the form

  document.getElementById('id').addEventListener('change', function() {
    document.getElementById('filterForm').submit();
  });

  const searchInput = document.getElementById('searchInputChoose') || document.getElementById('searchInputMenu');
  const dropdownList = document.getElementById('dropdownListChoose') || document.getElementById('dropdownListMenu');
  const dropdown = document.querySelector('.dropdownChoose') || document.querySelector('.dropdownMenu');
  let debounceTimeout;

  if (searchInput && dropdownList) {
    // Delete the 'Enter' key on form submit
    searchInput.addEventListener('keydown', function(e) {
      if (e.key === 'Enter') {
        e.preventDefault();
        return false;
      }
    });
    // If click on a dropdown element, get the value from the list button, and attribute the value to hidden fields, and submit form
    dropdownList.addEventListener('click', function(event) {

      const li = event.target.closest('.list-button');
      if (li) {
        document.getElementById('hiddenGameName').value = li.dataset.name;
        document.getElementById('hiddenGameId').value = li.dataset.id;
        document.getElementById('hiddenGameCover').value = li.dataset.cover;
        document.getElementById('hiddenGameDate').value = li.dataset.date;
        li.closest('form').submit();
      }
    });

    // Create the request to the API, when the user inserts an input, after 400ms 

    searchInput.addEventListener('input', async function() {
      clearTimeout(debounceTimeout);
      const query = this.value.trim();
      if (!query) {
        dropdownList.innerHTML = "";
        dropdown.classList.remove('active');
        return;
      }

      debounceTimeout = setTimeout(async () => {
        // Send the POST request to /search
        const response = await fetch('/search', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            search: query
          })
        });
        const games = await response.json();
        if (games.length > 0) {
          // Shows suggestions
          dropdown.classList.add('active');
          dropdownList.innerHTML = games.map(game =>
            `<li class="list-button" data-date="${new Date(game.first_release_date * 1000).toLocaleDateString('en-US', {
  month: 'long',
  day: 'numeric',
  year: 'numeric'
})}"data-name="${game.name}" data-id="${game.id}" data-cover="${game.cover.image_id ? 'https://images.igdb.com/igdb/image/upload/t_720p/' + game.cover.image_id + '.jpg' : ''}"> ${game.cover ? `<img src="https://images.igdb.com/igdb/image/upload/t_720p/${game.cover.image_id}.jpg">` : ''}<p>${game.name}</p></li>`
          ).join('');
        }

      }, 400);
    });
  }
</script>
</body>

</html>